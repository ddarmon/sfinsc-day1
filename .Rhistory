par(mfrow = c(1, 1))
plot(vals.to.fit, fitted(npudens.out), type  = 'l', xlim = ylim.measure, xlab = measure.name, ylab = 'Density')
rug(er.all)
# if (measure.type == 'Cmu'){
#   abline(v = log2(1:20))
# }
measure.average.per.subject = c()
for (subject.ind in 1:length(unique(subject.all))){
measure.average.per.subject = c(measure.average.per.subject, mean(er.all[subject.all == subject.ind]))
}
plot(measure.average.per.subject, col = unique(subject.all), pch = 16, cex = 2, ylim = ylim.measure)
abline(h = 0.5, lty = 2)
npudensbw.out = npudensbw(measure.average.per.subject)
npudens.out = npudens(npudensbw.out, tdat = measure.average.per.subject, edat = vals.to.fit)
par(mfrow = c(1, 1))
plot(vals.to.fit, fitted(npudens.out), type  = 'l', xlim = ylim.measure, xlab = measure.name, ylab = 'Density')
rug(measure.average.per.subject)
}
plot(measure.average.per.subject, col = unique(subject.all), pch = 16, cex = 2, ylim = ylim.measure, xlab = 'Subject Index', ylab = ylab.name)
abline(h = 0.5, lty = 2)
source('~/Dropbox (TIRP)/Reference/T/tirp/2016/dominic-discrete-entropy-rate/analyze-er-results.R')
par(mfrow = c(3, 1), mar=c(5,5,2,1), cex.lab = 2, cex.axis = 2)
plot(er.all, type = 'l', ylim = ylim.measure, xlab = 'File Index', ylab = ylab.name)
abline(h = 0.5, lty = 2)
plot(er.all, type = 'p', pch = 16, ylim = ylim.measure, col = subject.all, xlab = 'File Index', ylab = ylab.name)
abline(h = 0.5, lty = 2)
plot(vals.to.fit, fitted(npudens.out), type  = 'l', xlim = ylim.measure, xlab = measure.name, ylab = 'Density')
rug(er.all)
par(mfrow = c(2, 1))
plot(measure.average.per.subject, col = unique(subject.all), pch = 16, cex = 2, ylim = ylim.measure, xlab = 'Subject Index', ylab = ylab.name)
abline(h = 0.5, lty = 2)
npudensbw.out = npudensbw(measure.average.per.subject)
npudens.out = npudens(npudensbw.out, tdat = measure.average.per.subject, edat = vals.to.fit)
plot(vals.to.fit, fitted(npudens.out), type  = 'l', xlim = ylim.measure, xlab = measure.name, ylab = 'Density')
rug(measure.average.per.subject)
source('~/Dropbox (TIRP)/Reference/T/tirp/2016/dominic-discrete-entropy-rate/analyze-er-results.R')
source('~/Dropbox (TIRP)/Reference/T/tirp/2016/dominic-discrete-entropy-rate/analyze-er-results.R')
source('~/Dropbox (TIRP)/Reference/T/tirp/2016/dominic-discrete-entropy-rate/analyze-er-results.R')
source('~/Dropbox (TIRP)/Reference/T/tirp/2016/dominic-discrete-entropy-rate/analyze-er-results.R')
source('~/Dropbox (TIRP)/Reference/T/tirp/2016/dominic-discrete-entropy-rate/analyze-er-results.R')
source('~/Dropbox (TIRP)/Reference/T/tirp/2016/dominic-discrete-entropy-rate/analyze-er-results.R')
source('~/Dropbox (TIRP)/Reference/T/tirp/2016/dominic-discrete-entropy-rate/analyze-er-results.R')
source('~/Dropbox (TIRP)/Reference/T/tirp/2016/dominic-discrete-entropy-rate/analyze-er-results.R')
source('~/Dropbox (TIRP)/Reference/T/tirp/2016/dominic-discrete-entropy-rate/analyze-er-results.R')
source('~/Dropbox (TIRP)/Reference/T/tirp/2016/dominic-discrete-entropy-rate/analyze-er-results.R')
source('~/Dropbox (TIRP)/Reference/T/tirp/2016/dominic-discrete-entropy-rate/analyze-er-results.R')
source('~/Dropbox (TIRP)/Reference/T/tirp/2016/dominic-discrete-entropy-rate/analyze-er-results.R')
source('~/Dropbox (TIRP)/Reference/T/tirp/2016/dominic-discrete-entropy-rate/analyze-er-results.R')
source('~/Dropbox (TIRP)/Reference/T/tirp/2016/dominic-discrete-entropy-rate/analyze-er-results.R')
plot(xlim = c(-1, 1), ylim = c(21, 6))
plot(0, 0, xlim = c(-1, 1), ylim = c(21, 6))
abline(h = seq(6, 21))
plot(0, 0, xlim = c(-1, 1), ylim = c(21, 6), xaxs = 'n')
plot(0, 0, xlim = c(-1, 1), ylim = c(21, 6), xaxt = 'n')
plot(0, 0, xlim = c(-1, 1), ylim = c(21, 6), xaxt = 'n')
abline(h = seq(6, 21))
Sys.time
Sys.time()
format(Sys.time(), "%a %b %d %X %Y")
format(%X %Y")
format(Sys.time(), "%X")
time.string = format(Sys.time(), "%X")
strsplit(time.string, ':')
strsplit(time.string, ':')[[1]]
strsplit(time.string, ':')[[1]][1]
hour = as.numeric(strsplit(time.string, ':')[[1]][1])
minute = as.numeric(strsplit(time.string, ':')[[1]][2])
hour
minute
abline(h = hour + minute/60)
abline(h = hour + minute/60, col = 'red', lwd = 3)
par(xaxs = 's')
plot(0, 0, xlim = c(-1, 1), ylim = c(21, 6), xaxt = 'n')
abline(h = seq(6, 21))
plot(0, 0, xlim = c(-1, 1), ylim = c(21, 6), xaxt = 'n')
abline(h = seq(6, 21))
source('~/Documents/R/plot-time.R')
axis(side = 2, at = 6:21)
source('~/Documents/R/plot-time.R')
source('~/Documents/R/plot-time.R')
source('~/Documents/R/plot-time.R')
source('~/Documents/R/plot-time.R')
source('~/Documents/R/plot-time.R')
source('~/Documents/R/plot-time.R')
source('~/Documents/R/plot-time.R')
source('~/Documents/R/plot-time.R')
source('~/Documents/R/plot-time.R')
source('~/Documents/R/plot-time.R')
par(cex.lab = 0.01, cex.axis = 10)
plot(0, 0, xlim = c(-1, 1), ylim = c(21, 6), xaxt = 'n')
source('~/Documents/R/plot-time.R')
source('~/Documents/R/plot-time.R')
source('~/Documents/R/plot-time.R')
source('~/Documents/R/plot-time.R')
source('~/Documents/R/plot-time.R')
source('~/Documents/R/plot-time.R')
source('~/Documents/R/plot-time.R')
source('~/Documents/R/plot-time.R')
source('~/Documents/R/plot-time.R')
source('~/Documents/R/plot-time.R')
source('~/Documents/R/plot-time.R')
source('~/Documents/R/plot-time.R')
source('~/Documents/R/plot-time.R')
plot(-1:1, -1:1, type = "n", xlab = "Re", ylab = "Im")
K <- 16; text(exp(1i * 2 * pi * (1:K) / K), col = 2)
## The following two examples use latin1 characters: these may not
## appear correctly (or be omitted entirely).
plot(1:10, 1:10, main = "text(...) examples\n~~~~~~~~~~~~~~",
sub = "R is GNU ©, but not ® ...")
mtext("«Latin-1 accented chars»: éè øØ å<Å æ<Æ", side = 3)
points(c(6,2), c(2,1), pch = 3, cex = 4, col = "red")
text(6, 2, "the text is CENTERED around (x,y) = (6,2) by default",
cex = .8)
text(2, 1, "or Left/Bottom - JUSTIFIED at (2,1) by 'adj = c(0,0)'",
adj = c(0,0))
text(4, 9, expression(hat(beta) == (X^t * X)^{-1} * X^t * y))
text(4, 8.4, "expression(hat(beta) == (X^t * X)^{-1} * X^t * y)",
cex = .75)
text(4, 7, expression(bar(x) == sum(frac(x[i], n), i==1, n)))
## Two more latin1 examples
text(5, 10.2,
"Le français, c'est façile: Règles, Liberté, Egalité, Fraternité...")
text(5, 9.8,
"Jetz no chli züritüütsch: (noch ein bißchen Zürcher deutsch)")
?prop.test()
x = matrix(c(223, 75, 107, 21), ncol = 2)
x
x = matrix(c(223, 75, 107, 21), ncol = 2, byrow = TRUE)
x
prop.test(x)
0.8359375 -0.7483221
library(zoom)
plot(rnorm(100))
zm()
plot(cumsum(rnorm(100)))
plot(cumsum(rnorm(100)), type = 'l')
zm()
plot(cumsum(rnorm(100)), type = 'l')
plot(cumsum(runif(100)-0.5), type = 'l')
plot(cumsum(rexp(100)-0.5), type = 'l')
zm()
zm()
exp(-800)
exp(800)
?prop.test
x = matrix(c(210, 1267-210, 168, 1567 - 168))
x = matrix(c(210, 1267-210, 168, 1567 - 168), byrow = TRUE, nrow = 2)
x
prop.test(x)
0.1657459/0.1072112
-log(0.05/2)
-log(0.05/2)/(2*0.1^2)
?dt
?prop.test
prop.test(x = c(404, 367), n = c(1000, 1000))
prop.test(c(380, 365), c(1000, 1000))
prop.test(x = c(19, 0.775*40), n = c(38, 40))
0.775*40
X = rnorm(1000)
Xhat = fft(X)
Xhat
plot(Xhat)
ts = 1:length(X)
source('~/Documents/R/learn-signal-processing/fourier-R-definition.R')
1j
1i
source('~/Documents/R/learn-signal-processing/fourier-R-definition.R')
cbind(Xhat, Xhat.mine)
plot(Xhat)
points(Xhat.mine, col = 'red')
source('~/Documents/R/learn-signal-processing/fourier-R-definition.R')
source('~/Documents/R/learn-signal-processing/fourier-R-definition.R')
cbind(Xhat[1:100], Xhat.mine[1:100])
cbind(Xhat[1:10], Xhat.mine[1:10])
Xhat.mine = Xhat.mine / sqrt(length(X))
cbind(Xhat[1:10], Xhat.mine[1:10])
exp(-1i*omega.j*ts)
j = 2
omega.j = 2*pi*j/length(X)
Xhat.mine[j] = sum(X*exp(-1i*omega.j*ts))
exp(-1i*omega.j*ts)
source('~/Documents/R/learn-signal-processing/fourier-R-definition.R')
source('~/Documents/R/learn-signal-processing/fourier-R-definition.R')
omega.j
j
X*exp(-1i*omega.j*ts)
j
omega.j
sum(X*exp(-1i*omega.j*ts))
?fft
source('~/Documents/R/learn-signal-processing/fourier-R-definition.R')
cbind(Xhat[1:10], Xhat.mine[1:10])
cbind(Xhat[1], Xhat.mine[length(Xhat.mine)])
source('~/Documents/R/learn-signal-processing/fourier-R-definition.R')
cbind(Xhat[1:10], Xhat.mine[1:10])
show(cbind(Xhat[1:10], Xhat.mine[1:10]))
show(cbind(Xhat[1], Xhat.mine[length(Xhat.mine)]))
show(cbind(Xhat[2:11], Xhat.mine[1:10]))
source('~/Documents/R/learn-signal-processing/fourier-R-definition.R')
source('~/Documents/R/learn-signal-processing/fourier-R-definition.R')
source('~/Documents/R/learn-signal-processing/fourier-R-definition.R')
source('~/Documents/R/learn-signal-processing/fourier-R-definition.R')
source('~/Documents/R/learn-signal-processing/fourier-R-definition.R')
source('~/Documents/R/learn-signal-processing/fourier-R-definition.R')
source('~/Documents/R/learn-signal-processing/fourier-R-definition.R')
source('~/Documents/R/learn-signal-processing/fourier-R-definition.R')
matrix(c(0.5, 0.5, 1, 0), byrow = TRUE)
matrix(c(0.5, 0.5, 1, 0), byrow = TRUE, nrow = 2)
eig(matrix(c(0.5, 0.5, 1, 0), byrow = TRUE, nrow = 2))
eigen(matrix(c(0.5, 0.5, 1, 0), byrow = TRUE, nrow = 2))
eigen(t(matrix(c(0.5, 0.5, 1, 0)), byrow = TRUE, nrow = 2))
eigen(t(matrix(c(0.5, 0.5, 1, 0), byrow = TRUE, nrow = 2))
)
eigen(t(matrix(c(0.5, 0.5, 1, 0), byrow = TRUE, nrow = 2)))
c(0.8944272, 0.4472136)
v = c(0.8944272, 0.4472136)
p = v/sum(v)
p
-p*log2(p)
sum(-p*log2(p))
?sample
sample
sample.int
.Internal(
)
.Internal()
.Internal(sample2)
.Internal(sample2(10, 2))
data.out = read.csv('Minus_700_mV.txt')
data.out = read.csv('Minus_700_mV.txt', header = FALSE, sep = '')
data.out$V2
data.out$V2[1:1000]
plot(data.out$V2[1:1000], type = 'l')
plot(data.out$V2[1:2000], type = 'l')
plot(data.out$V2[1:3000], type = 'l')
plot(data.out$V2[1:4000], type = 'l')
plot(data.out$V2[1:5000], type = 'l')
plot(data.out$V2[1:10000], type = 'l')
plot(data.out$V2[1:100000], type = 'l')
plot(data.out$V2[1:10000], type = 'l')
plot(data.out$V2[1:100000+1000], type = 'l')
plot(data.out$V2[1:100000+10000], type = 'l')
plot(data.out$V2[1:100000+100000], type = 'l')
plot(data.out$V2[1:100000+100000], type = 'l')
plot(data.out$V2[1:100000+200000], type = 'l')
plot(data.out$V2[1:100000+300000], type = 'l')
plot(data.out$V2[1:100000+200000], type = 'l')
plot(data.out$V2[1:100000+100000], type = 'l')
plot(data.out$V2[1:100000+200000], type = 'l')
plot(data.out$V2[1:100000+300000], type = 'l')
plot(data.out$V2[1:300000], type = 'l')
plot(data.out$V1, data.out$V2, type = 'l')
source('~/Google Drive/Reference/T/tirp/2017/knn-spenra-ste/demo-jidt-spenra-KL.R')
source('~/Google Drive/Reference/T/tirp/2017/knn-spenra-ste/demo-jidt-spenra-KL.R')
source('~/Google Drive/Reference/T/tirp/2017/knn-spenra-ste/demo-jidt-spenra-KL.R')
par(mfrow = c(4, 1))
plot(x, type = 'l', xlim = xlim.use)
points(x, pch = 16)
plot(ler.knn, type = 'l', xlim = xlim.use)
source('~/Google Drive/Reference/T/tirp/2017/knn-spenra-ste/demo-jidt-spenra-KL.R')
source('~/Google Drive/Reference/T/tirp/2017/knn-spenra-ste/demo-jidt-spenra-KL.R')
xlim.use = c(800/downsample.by, 4000/downsample.by) # Good for longer ts
plot(ler.knn, type = 'l', xlim = xlim.use)
plot(ser.estimate.knn, type = 'l', xlim = xlim.use)
par(mfrow = c(4, 1))
plot(x, type = 'l', xlim = xlim.use)
points(x, pch = 16)
plot(ler.knn, type = 'l', xlim = xlim.use)
plot(ser.estimate.knn, type = 'l', xlim = xlim.use)
# points(ser.estimate.knn)
xlim.use = c(100/downsample.by, 8000/downsample.by) # Good for longer ts
par(mfrow = c(4, 1))
plot(x, type = 'l', xlim = xlim.use)
points(x, pch = 16)
plot(ler.knn, type = 'l', xlim = xlim.use)
plot(ser.estimate.knn, type = 'l', xlim = xlim.use)
# points(ser.estimate.knn)
plot(uniformize(x), type = 'l', xlim = xlim.use, col = 'blue')
lines(uniformize(ser.estimate.knn), col = 'red')
xlim.use = c(200/downsample.by, 16000/downsample.by) # Good for longer ts
par(mfrow = c(4, 1))
plot(x, type = 'l', xlim = xlim.use)
points(x, pch = 16)
plot(ler.knn, type = 'l', xlim = xlim.use)
plot(ser.estimate.knn, type = 'l', xlim = xlim.use)
# points(ser.estimate.knn)
plot(uniformize(x), type = 'l', xlim = xlim.use, col = 'blue')
lines(uniformize(ser.estimate.knn), col = 'red')
xlim.use = c(800/downsample.by, 16000/downsample.by) # Good for longer ts nanopore
par(mfrow = c(4, 1))
plot(x, type = 'l', xlim = xlim.use)
xlim.use = c(8000/downsample.by, 16000/downsample.by) # Good for longer ts nanopore
# xlim.use = c(4300, 10000)
# xlim.use = c(1, 4000) # Good for svdP
# xlim.use = c(5000, 6000) # Good for Fitzhugh-Nagumo oscillator.
par(mfrow = c(4, 1))
plot(x, type = 'l', xlim = xlim.use)
points(x, pch = 16)
plot(ler.knn, type = 'l', xlim = xlim.use)
plot(ser.estimate.knn, type = 'l', xlim = xlim.use)
# points(ser.estimate.knn)
plot(uniformize(x), type = 'l', xlim = xlim.use, col = 'blue')
lines(uniformize(ser.estimate.knn), col = 'red')
source('~/Google Drive/Reference/T/tirp/2017/knn-spenra-ste/demo-jidt-spenra-KL.R')
source('~/Google Drive/Reference/T/tirp/2017/knn-spenra-ste/demo-jidt-spenra-KL.R')
x = read.csv('/Users/daviddarmon/Dropbox (Personal)/Gilpin PhD/Siwy_Raw_Data/Minus_100_mV.txt', sep = '', header = FALSE)$V2
downsample.by = 10
x_full = x[seq(1, length(x), by = downsample.by)]
length(x_full)
source('~/Google Drive/Reference/T/tirp/2017/knn-spenra-ste/demo-jidt-spenra-KL.R')
source('~/Google Drive/Reference/T/tirp/2017/knn-spenra-ste/demo-jidt-spenra-KL.R')
source('~/Google Drive/Reference/T/tirp/2017/knn-spenra-ste/demo-jidt-spenra-KL.R')
source('~/Google Drive/Reference/T/tirp/2017/knn-spenra-ste/demo-jidt-spenra-KL.R')
source('~/Google Drive/Reference/T/tirp/2017/knn-spenra-ste/demo-jidt-spenra-KL.R')
x
source('~/Google Drive/Reference/T/tirp/2017/knn-spenra-ste/demo-jidt-spenra-KL.R')
x
min(x)
max(x)
library(FNN)
source('/Users/daviddarmon/Google Drive/Reference/T/tirp/2015/hrv-analysis/er-functions.R')
source('/Users/daviddarmon/Google Drive/Reference/T/tirp/2016/working-papers/specific-transfer-entropy/scripts/generic-functions.R')
# Load the rJava library and start the JVM
library("rJava")
.jinit(force.init = TRUE)
.jaddClassPath("/Users/daviddarmon/Google Drive/Reference/T/tirp/2016/working-papers/specific-transfer-entropy/scripts/infodynamics.jar")
# x = read.csv('/Users/daviddarmon/Google Drive/Reference/T/tirp/2017/knn-spenra-ste/nanopore-high-sr.dat', header = FALSE, sep = ',')$V2
# x = read.csv('/Users/daviddarmon/Google Drive/Reference/T/tirp/2017/knn-spenra-ste/nanopore-high-sr-long.dat', header = FALSE, sep = ',')$V2
# x = read.csv('/Users/daviddarmon/Google Drive/Reference/T/tirp/2017/knn-spenra-ste/nanopore-high-sr-verylong.dat', header = FALSE, sep = ',')$V2
# x = read.csv('/Users/daviddarmon/Documents/MATLAB/srk/data/fn_X.dat', header = FALSE)$V2
# x = read.csv('/Users/daviddarmon/Documents/MATLAB/srk/data/fn_Y.dat', header = FALSE)$V2
# x = x[1:62500]
# x = read.csv('/Users/daviddarmon/Documents/MATLAB/srk/data/vdp-switching_multirealization/vdp_X-switching-1.dat', header = FALSE)$V2
# x = read.csv('/Users/daviddarmon/Documents/MATLAB/srk/data/vdp-switching_multirealization/vdp_X-switching-det-1.dat', header = FALSE)$V2
# x = read.csv('/Users/daviddarmon/Documents/MATLAB/srk/data/vdp-switching_multirealization/vdp_Y-switching-1.dat', header = FALSE)$V2
# x = read.csv('/Users/daviddarmon/Documents/MATLAB/srk/data/vdp-switching_multirealization/vdp_Y-switching-det-1.dat', header = FALSE)$V2
# x = read.csv('/Users/daviddarmon/Documents/MATLAB/srk/data/vdP-long/vdp_X.dat', header = FALSE)$V2
# x = read.csv('/Users/daviddarmon/Documents/MATLAB/srk/data/vdP-long/vdp_Y.dat', header = FALSE)$V2
# x = read.csv('/Users/daviddarmon/Documents/MATLAB/srk/data/vdP-long/vdp_X-det.dat', header = FALSE)$V2
# x = read.csv('/Users/daviddarmon/Documents/MATLAB/srk/data/vdP-long/vdp_Y-det.dat', header = FALSE)$V2
# deltat = 0.1
# x = cumsum(c(0, rnorm(n = 400000, mean = 0, sd = sqrt(deltat))))
# x = read.csv('/Users/daviddarmon/Google Drive/Reference/T/tirp/2015/hrv-analysis/data/lorenz-raw.csv', nrows = 1000000)$x
x = read.csv('/Users/daviddarmon/Dropbox (Personal)/Gilpin PhD/Siwy_Raw_Data/Minus_1000_mV.txt', sep = '', header = FALSE)$V2
mean(x)
sd(x)
source('~/Google Drive/Reference/T/tirp/2017/knn-spenra-ste/demo-jidt-spenra-KL.R')
source('~/Google Drive/Reference/T/tirp/2017/knn-spenra-ste/demo-jidt-spenra-KL.R')
source('~/Google Drive/Reference/T/tirp/2017/knn-spenra-ste/demo-jidt-spenra-KL.R')
source('~/Google Drive/Reference/T/tirp/2017/knn-spenra-ste/demo-jidt-spenra-KL.R')
ser
ser.estimate.knn
ler.knn
ler.knn
p.min
source('~/Google Drive/Reference/T/tirp/2017/knn-spenra-ste/demo-jidt-spenra-KL.R')
source('~/Google Drive/Reference/T/tirp/2017/knn-spenra-ste/demo-jidt-spenra-KL.R')
library(filter)
library('filter')
source('~/Google Drive/Reference/T/tirp/2017/knn-spenra-ste/demo-jidt-spenra-KL.R')
source('~/Google Drive/Reference/T/tirp/2017/knn-spenra-ste/demo-jidt-spenra-KL.R')
source('~/Google Drive/Reference/T/tirp/2017/knn-spenra-ste/demo-jidt-spenra-KL.R')
source('~/Google Drive/Reference/T/tirp/2017/knn-spenra-ste/demo-jidt-spenra-KL.R')
x[1:100]
unique(x)
length(unique(x))
length(x)
x = (x - mean(x))/sd(x)
x
unique(x)
source('~/Google Drive/Reference/T/tirp/2017/knn-spenra-ste/demo-jidt-spenra-KL.R')
source('~/Google Drive/Reference/T/tirp/2017/knn-spenra-ste/demo-jidt-spenra-KL.R')
source('~/Google Drive/Reference/T/tirp/2017/knn-spenra-ste/demo-jidt-spenra-KL.R')
source('~/Google Drive/Reference/T/tirp/2017/knn-spenra-ste/demo-jidt-spenra-KL.R')
unique(x)
source('~/Google Drive/Reference/T/tirp/2017/knn-spenra-ste/demo-jidt-spenra-KL.R')
x
x = read.csv('/Users/daviddarmon/Dropbox (Personal)/Gilpin PhD/Siwy_Raw_Data/Plus_100_mV.txt', sep = '', header = FALSE)$V2
x
unique(x)
x = x + (0.5 - runif(length(x)))*0.01
x
unique(x)
source('~/Google Drive/Reference/T/tirp/2017/knn-spenra-ste/demo-jidt-spenra-KL.R')
(0.5 - runif(length(x)))*0.01
source('~/Google Drive/Reference/T/tirp/2017/knn-spenra-ste/demo-jidt-spenra-KL.R')
x
x[:10]
x[1:10]
(0.5 - runif(length(x)))*0.1
source('~/Google Drive/Reference/T/tirp/2017/knn-spenra-ste/demo-jidt-spenra-KL.R')
min(x)
max(x)
source('~/Google Drive/Reference/T/tirp/2017/knn-spenra-ste/demo-jidt-spenra-KL.R')
x
spec.ar(x)
spec.ar(x, order = 1)
spec.ar(x, order = 2)
spec.ar(x, order = 3)
spec.ar(x, order = 4)
spec.ar(x, order = 5)
spec.ar(x, order = 6)
spec.ar(x, order = 7)
source('~/Google Drive/Reference/T/tirp/2017/knn-spenra-ste/demo-jidt-spenra-KL.R')
source('~/Google Drive/Reference/T/tirp/2017/knn-spenra-ste/demo-jidt-spenra-KL.R')
source('~/Google Drive/Reference/T/tirp/2017/knn-spenra-ste/demo-jidt-spenra-KL.R')
source('~/Google Drive/Reference/T/tirp/2017/knn-spenra-ste/demo-jidt-spenra-KL.R')
source('~/Google Drive/Reference/T/tirp/2017/knn-spenra-ste/demo-jidt-spenra-KL.R')
source('~/Google Drive/Reference/T/tirp/2017/knn-spenra-ste/demo-jidt-spenra-KL.R')
xlim.use = c(8000/downsample.by, 16000/downsample.by) # Good for longer ts nanopore
# xlim.use = c(1, 4000) # Good for svdP
# xlim.use = c(5000, 6000) # Good for Fitzhugh-Nagumo oscillator.
par(mfrow = c(1, 1), pty = 'm')
plot(uniformize(x), type = 'l', xlim = xlim.use, col = 'blue', ylim = c(-1, 2))
lines(uniformize(ser.estimate.knn), col = 'red')
segments(x0 = seq_len(length(ser.estimate.knn)), x1 = seq_len(length(ser.estimate.knn)), y0 = uniformize(x), y1 = uniformize(ser.estimate.knn), col = 'grey', lwd = 0.5)
library(extrafont)
fonts()
library(rJava)
library(rJava)
install.packages('rJava')
library(rJava)
library(rJava)
remove.packages('rJAva')
remove.packages('rJava')
install.packages('rJava')
library(rJava)
R --quiet -e 'install.packages("rJava", type="source", repos="http://cran.us.r-project.org")'
install.packages('rJava')
library(rJava)
library(rJava)
source('~/Dropbox (Personal)/Reference/R/Research/2017/sfi-short-course/resources/1-network-tools/igraph-example.R')
plot(eigen_centrality.out$vector)
decompose(network)
decompose.out = decompose(network)
length(decompose)
dim(decompose)
length(decompose.out)
decompose.out[[1]]
V(decompose.out[[1]])
length(V(decompose.out[[1]]))
eigen_centrality(decompose.out[[1]])))
eigen_centrality(decompose.out[[1]]))
eigen_centrality(decompose.out[[1]])
eigen_centrality(decompose.out[[1]])$vector
plot(eigen_centrality(decompose.out[[1]])$vector)
plot(eigen_centrality(decompose.out[[1]])$vector, type = 'l')
diameter.out = diameter(network)
diameter.out
degree(network)
embed_adjacency_matrix(network)
embed_adjacency_matrix(network, no = 2)
embed.out = embed_adjacency_matrix(network, no = 2)
plot(embed.out$X)
dim(embed.out$X)
embed.out$X
embed.out = embed_adjacency_matrix(decompose.out[[1]], no = 2)
plot(embed.out$X)
embed.out = embed_adjacency_matrix(decompose.out[[1]], no = 3)
plot(embed.out$X)
embed.out$X
dim(embed.out$X)
library(rgl)
plot3d(embed.out$X)
embed.out = embed_adjacency_matrix(decompose.out[[1]], no = 2)
plot(embed.out$X)
embed.out = embed_adjacency_matrix(decompose.out[[2]], no = 2)
plot(embed.out$X)
embed.out = embed_adjacency_matrix(decompose.out[[3]], no = 2)
plot(embed.out$X)
embed.out = embed_adjacency_matrix(decompose.out[[4]], no = 2)
plot(embed.out$X)
embed.out = embed_adjacency_matrix(decompose.out[[1]], no = 2)
plot(embed.out$X)
embed.out = embed_laplacian_matrix(decompose.out[[1]], no = 2)
plot(embed.out$X)
mean(degree.out)
library(extrafont)
remove.packages(extrafont)
remove.packages('extrafont')
install.packages('extrafont')
library(extrafont)
library(extrafont)
quit
setwd('/Users/daviddarmon/Documents/Reference/G/github/sfinsc-day1/data/imdb')
setwd('/Users/daviddarmon/Documents/Reference/G/github/sfinsc-day1')
library(igraph)
network = read_graph("data/imdb/actor_net.graphML", format = 'graphml')
V(network)
E(network)
degree.out = degree(network)
degree.out
plot(degree.distribution(degree.out))
plot(degree.out)
plot(degree.out, type = 'l')
plot(ecdf(degree.out))
plot(table(degree.out))
plot(degree.distribution(network), type = 'l')
degree.distribution(network)
table(degree.out)
plot(eigen_centrality.out$vector)
eigen_centrality.out = eigen_centrality(network)
plot(eigen_centrality.out$vector)
plot(eigen_centrality.out$vector, type = 'l')
decompose.out = decompose(network)
length(decompose.out)
plot(eigen_centrality(decompose.out[[1]])$vector, type = 'l')
diameter.out = diameter(network)
embed.out = embed_adjacency_matrix(decompose.out[[1]], no = 2)
plot(embed.out$X)
embed.out = embed_laplacian_matrix(decompose.out[[1]], no = 2)
plot(embed.out$X)
